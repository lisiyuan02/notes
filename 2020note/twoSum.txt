class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hashtable;			//定义哈希表
        for (int i = 0; i < nums.size(); ++i) {
            auto it = hashtable.find(target - nums[i]);		//当我们无法知道返回类型时可以使用auto
            if (it != hashtable.end()) {
                return {it->second, i};				//it->first会得到key。it->second会得到value
            }
            hashtable[nums[i]] = i;				//哈希表的赋值
        }
        return {};
    }
};

//以上为利用HASH表进行的操作。
//unordered_map是c++中哈希表的实现模板，它的头文件是#include<unordered_map>，存储<key,value>键值对，
//可以在常数时间内通过key值找到value值，如何判断unordered_map中某个键值是否存在，通过find()函数。
//iterator find ( const key_type& key );
//如果key存在，则find返回key对应的迭代器，如果key不存在，则find返回unordered_map::end。因此可以通过
//		map.find(key)==map.end()
//来判断key值是否存在于unordered_map中。
//哈希表的赋值：
    unordered_map<int, string> myMap={{ 5, "张大" },{ 6, "李五" }};//使用{}赋值
    myMap[2] = "李四";  //使用[ ]进行单个插入，若已存在键值2，则赋值修改，若无则插入。
    myMap.insert(pair<int, string>(3, "陈二"));//使用insert和pair插入